# -*- coding: utf-8 -*-
"""Handwritten-digit-recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14LisJLlge5jQxCU0hG9CvwJXL2cQg_sU
"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.neighbors import KNeighborsClassifier as KNN
from sklearn.metrics import plot_confusion_matrix, r2_score
from sklearn.preprocessing import StandardScaler
import joblib

dataset = keras.datasets.mnist

(X_trainfull, Y_trainfull), (X_testfull, Y_testfull) = dataset.load_data()

print(X_trainfull.shape[0],'X train samples')
print(X_testfull.shape[0],'X test samples')
print(Y_trainfull.shape[0], 'Y train samples')
print(Y_testfull.shape[0],'Y test samples')

pd.Series(Y_trainfull).value_counts()

pd.Series(Y_testfull).value_counts()

X_train = X_trainfull[:600]
Y_train = Y_trainfull[:600]
X_test = X_testfull[:100]
Y_test = Y_testfull[:100]

# Visualize one digit
plt.figure(figsize=(60,60))
for i in range(9):
    plt.subplot(3,3,i+1)
    plt.imshow(X_train[i],cmap='gray')
plt.show()

count = 0
plt.figure(figsize=(60,60))
for i in range(len(X_train)):
    if Y_train[i] == 7:
        plt.subplot(3,3,count+1)
        plt.imshow(X_train[i],cmap='gray')
        count += 1
    if count == 9:
        break
plt.show()

plt.figure(figsize=(60,60))
pics7_indices = np.where(Y_train == 7)
for i in range(9):
    plt.subplot(3,3,i+1)
    plt.imshow(X_train[pics7_indices[0][i]],cmap='gray')
plt.show()

nsample, nx, ny = X_test.shape
X_test = X_test.reshape(nsample,nx*ny)
nsample, nx, ny = X_train.shape
X_train = X_train.reshape(nsample,nx*ny)

distance = ['minkowski', 'cosine', 'euclidean']
df = pd.DataFrame(columns = ['k', 'Distance', 'Accuracy of values'])
for i in range(1,8,2):
    for j in distance:
        model = KNN(n_neighbors = i,metric = j, p = 3)
        model.fit(X_train, Y_train)
        print('Confusion matrix with k = {} and {} distance'.format(i,j))
        plot_confusion_matrix(model, X_test, Y_test)
        plt.show()
    
        #In ra độ chính xác và kết quả độ đo của từng model
        accuracy_score = model.score(X_test, Y_test)
        df = df.append(pd.DataFrame([[i,j,accuracy_score]], columns = ['k', 'Distance', 'Accuracy of values']), ignore_index = True)

df